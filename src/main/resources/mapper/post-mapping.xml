<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.blue.mapper.PostMapper">

    <!-- 뉴스피드 게시글 조회 -->
    <select id ="listPost" resultType ="post">
        SELECT post.post_seq, post.member_id, post.post_content, TO_CHAR(post.post_date, 'yy-mm-dd') as post_date, post.post_public, post.post_image_count, plike.post_like_count, rlike.post_reply_count
        FROM post
                 LEFT OUTER JOIN (SELECT post_seq, count(*) post_Like_Count
                                  FROM likes
                                  WHERE reply_seq = 0
                                  GROUP BY post_seq) as plike
                                 USING (post_seq)
                 LEFT OUTER JOIN (SELECT post_seq, count(*) post_reply_count
                                  FROM reply
                                  GROUP BY post_seq) as rlike
                                 USING (post_seq)
        WHERE post.member_id IN (SELECT FOLLOWING
                            FROM follow
                            WHERE follower = #{member_Id}) and post.post_public = 'y'
           OR post.member_id = #{member_Id}
        ORDER BY post.post_Date DESC, post.post_Seq DESC
    </select>

    <!-- 게시글 상세조회(모달창) -->
    <select id ="postDetail" resultType ="post">
        SELECT post.post_seq, post.member_id, post.post_content, TO_CHAR(post.post_date, 'yy-mm-dd') as post_date, post.post_public, post.post_image_count, plike.post_like_count, rlike.post_reply_count
        FROM post
                 LEFT OUTER JOIN (SELECT post_seq, count(*) post_Like_Count
                                  FROM likes
                                  WHERE reply_seq = 0
                                  GROUP BY post_seq) as plike
                                 USING (post_seq)
                 LEFT OUTER JOIN (SELECT post_seq, count(*) post_reply_count
                                  FROM reply
                                  GROUP BY post_seq) as rlike
                                 USING (post_seq)
        WHERE post.post_seq = #{post_Seq}
        ORDER BY post.post_Seq DESC
    </select>


    <!-- 인기글 조회 -->
    <select id = "getHottestFeed" resultType = "post">
        SELECT * FROM post
                          INNER JOIN ( SELECT post_seq, count(*) post_Like_Count
                                       FROM likes
                                       WHERE  reply_seq = 0
                                       GROUP BY post_seq) as ll
                                     USING (post_seq)
        WHERE post_public = 'y'
        ORDER BY ll.post_Like_Count DESC
    </select>

    <!-- 게시글 등록 -->
    <insert id="insertPost">
        insert into post(post_seq, member_id, post_content, post_public, post_image_count)
        values(#{post_Seq}, #{member_Id}, #{post_Content},
               #{post_Public}, #{post_Image_Count})
    </insert>

    <!-- 게시글 삭제 -->
    <delete id="deletePost">
        delete from post where post_Seq = #{post_Seq}
    </delete>

    <!-- 게시글 좋아요 체크 -->
    <select id = "checkLike" resultType = "String">
        SELECT member_Id FROM likes
        WHERE member_Id = #{member_Id} AND post_Seq = #{post_Seq} AND reply_Seq = 0
    </select>

    <!-- 게시글 좋아요 추가 -->
    <insert id = "addLike">
        INSERT INTO likes(member_id, post_seq, reply_seq)
        VALUES(#{member_Id}, #{post_Seq}, 0)
    </insert>

    <!-- 게시글 좋아요 취소 -->
    <delete id = "delLike">
        DELETE FROM likes
        WHERE member_Id = #{member_Id} AND post_Seq = #{post_Seq} AND reply_Seq = 0
    </delete>

    <!-- 사용자 별 프로필 페이지 게시글 리스트 -->
    <select id="memberPost" resultType="post">
        SELECT *
        FROM post
        WHERE member_Id = #{member_Id}
        <if test="!member_Id.equalsIgnoreCase(session_Id)">
            AND post_public = 'y'
        </if>
        ORDER BY post_Seq DESC
    </select>

    <!-- 관리자 전체 게시글 조회 -->
    <select id = "getAllPost" resultType = "post">
        SELECT * FROM post
        ORDER BY post_Seq DESC
    </select>

    <!-- 가장 최근에 생성된 시퀀스 번호 조회 (이미지 저장위해서 조회) -->
    <select id="postSeqCheck" resultType="int">
        SELECT COALESCE(MAX(post_Seq), 1)
        FROM post
    </select>

    <!-- 해시태그 테이블 저장 -->
    <insert id="insertTag">
        INSERT INTO tag(tag_Seq, post_Seq, tag_Content)
        VALUES (NEXTVAL('tag_seq'), #{post_Seq}, #{tag_Content})
    </insert>

    <!-- 게시글 해시태그 출력 -->
    <select id="postHashtag" resultType="tag">
        select *
        from tag
        where post_seq = #{post_Seq}
    </select>

    <!-- 회원 탈퇴 전 해시테그 테이블 데이터 삭제 -->
    <delete id = "deleteOneMemsTag">
        DELETE FROM tag
        WHERE post_Seq IN (SELECT post_Seq FROM post
                           WHERE member_Id = #{member_Id})
    </delete>

    <!-- 관리자 게시글 상세보기 -->
    <select id="selectPostDetail" resultType="post">
        SELECT *
        FROM post
        WHERE post_Seq = #{post_Seq}
    </select>

    <!-- 해쉬태그 검색 기능 -->
    <select id="getHashTagPost" resultType="post">
        select *
        from post
        where post_seq in (select post_seq from tag where tag_content like <![CDATA[#{tag_content}]]>)
          and post_public = 'y'
    </select>

    <!-- 관리자 페이지 오늘의 해시태그 -->
    <select id = "getTodaysTag" resultType = "tag">
		<![CDATA[
        SELECT tag_Content, tag_Count
        FROM (SELECT tag_Content, COUNT(*) tag_Count
             FROM tag
             WHERE post_Seq IN(SELECT post_Seq FROM post
                               WHERE DATE_TRUNC('day', post_Date) >= CURRENT_DATE - INTERVAL '7 days')
             GROUP BY tag_Content
             ORDER BY tag_Count DESC) as subquery LIMIT 5
        ]]>
	</select>

    <!-- 게시글 수정 처리 -->
    <update id="updatePost">
        update post
        set post_content     = #{post_Content},
            post_public  	= #{post_Public},
            post_image_count = #{post_Image_Count}
        where post_seq = #{post_Seq}
    </update>

    <!-- 게시글 해시태그 수정전 삭체 저리 -->
    <delete id="deleteTag">
        delete from tag where post_seq = #{post_Seq}
    </delete>

    <!-- 알람을 위해 게시글 작성자 가져오기 -->
    <select id = "postWriter" resultType = "String">
        SELECT member_Id FROM post WHERE post_Seq = #{post_Seq}
    </select>

    <!-- 알람 인서트 시 시퀀스 0 댓글 존재 여부 -->
    <select id = "checkZeroPostSeq" resultType = "String">
        SELECT member_Id
        FROM post
        WHERE post_Seq = '0'
    </select>

    <!-- 회원 탈퇴시 업로드한 이미지를 삭제 하기 위한 사용자가 작성한 게시글들의 시퀀스 번호 조회 -->
    <select id="seqForUser" resultType = "int">
        SELECT post_Seq
        FROM post
        WHERE member_Id = #{member_Id}
    </select>
</mapper>
